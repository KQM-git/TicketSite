// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Ticket {
  id            Int            @id @default(autoincrement())
  createdAt     DateTime       @default(now())
  lastRename    DateTime?
  lastMessage   DateTime       @default(now())
  type          String
  status        String         @default("OPEN")
  deleted       Boolean        @default(false)
  channelId     String         @unique
  name          String
  creator       User           @relation("created", fields: [creatorId, serverId], references: [discordId, serverId])
  creatorId     String
  server        Server         @relation(fields: [serverId], references: [id])
  serverId      String
  verifications Verification[]
  transcript    Transcript[]
  contributors  User[]         @relation("contributes")
}

model Transcript {
  id                Int               @id @default(autoincrement())
  slug              String            @unique
  createdAt         DateTime          @default(now())
  channel           Channel           @relation("created_for", fields: [channelId, serverId], references: [discordId, serverId])
  channelId         String
  messages          Message[]
  users             User[]
  mentionedRoles    Role[]            @relation("mentioned_roles")
  mentionedChannels Channel[]         @relation("mentioned_channels")
  verifications     Verification[]
  server            Server            @relation(fields: [serverId], references: [id])
  serverId          String
  ticket            Ticket?           @relation(fields: [ticketId], references: [id])
  ticketId          Int?
  queuedTranscript  QueuedTranscript?
}

model QueuedTranscript {
  id            Int        @id @default(autoincrement())
  createdAt     DateTime   @default(now())
  channel       Channel    @relation(fields: [channelId, serverId], references: [discordId, serverId])
  channelId     String
  botReplyId    String
  botChannelId  String
  dumpChannelId String?
  upTo          String?
  latest        String
  endAction     String
  fetched       Int        @default(0)
  transcriber   User       @relation(fields: [transcriberId, serverId], references: [discordId, serverId])
  transcriberId String
  server        Server     @relation(fields: [serverId], references: [id])
  serverId      String
  transcript    Transcript @relation(fields: [transcriptId], references: [id])
  transcriptId  Int        @unique
}

model Verification {
  id           Int         @id @default(autoincrement())
  createdAt    DateTime    @default(now())
  channelId    String
  channelName  String
  verifier     User        @relation(fields: [userId, serverId], references: [discordId, serverId])
  userId       String
  server       Server      @relation(fields: [serverId], references: [id])
  serverId     String
  transcript   Transcript? @relation(fields: [transcriptId], references: [id])
  transcriptId Int?
  ticket       Ticket      @relation(fields: [ticketsId], references: [id])
  ticketsId    Int
}

model User {
  id        Int      @id @default(autoincrement())
  discordId String
  server    Server   @relation(fields: [serverId], references: [id])
  serverId  String
  roleColor String?
  nickname  String?
  username  String?
  tag       String?
  avatar    String?
  bot       Boolean?
  verified  Boolean?

  queuedTranscripts QueuedTranscript[]
  verifications     Verification[]
  transcripts       Transcript[]
  messages          Message[]
  tickets           Ticket[]           @relation("created")
  contributed       Ticket[]           @relation("contributes")

  @@unique([discordId, serverId])
}

model Role {
  id        Int     @id @default(autoincrement())
  discordId String
  server    Server  @relation(fields: [serverId], references: [id])
  serverId  String
  name      String
  roleColor String?
  deleted   Boolean @default(false)

  Transcript Transcript[] @relation("mentioned_roles")

  @@unique([discordId, serverId])
}

model Channel {
  id        Int     @id @default(autoincrement())
  discordId String
  server    Server  @relation(fields: [serverId], references: [id])
  serverId  String
  name      String
  type      String
  deleted   Boolean @default(false)

  mentionedIn       Transcript[]       @relation("mentioned_channels")
  transcripts       Transcript[]       @relation("created_for")
  queuedTranscripts QueuedTranscript[]

  @@unique([discordId, serverId])
}

model Server {
  id        String   @id
  createdAt DateTime @default(now())
  name      String
  icon      String?

  transcripts       Transcript[]
  queuedTranscripts QueuedTranscript[]
  verifications     Verification[]
  users             User[]
  messages          Message[]
  tickets           Ticket[]
  ticketDirectory   TicketDirectory[]
  roles             Role[]
  channels          Channel[]
}

model Message {
  id        Int       @id @default(autoincrement())
  discordId String
  createdAt DateTime
  editedAt  DateTime?

  attachments Json[]
  reactions   Json[]
  embeds      Json[]
  content     String
  components  Json[]
  stickers    Json[]
  reply       String?

  user         User       @relation(fields: [userId, serverId], references: [discordId, serverId])
  userId       String
  server       Server     @relation(fields: [serverId], references: [id])
  serverId     String
  transcript   Transcript @relation(fields: [transcriptId], references: [id])
  transcriptId Int
}

model TicketDirectory {
  server    Server @relation(fields: [serverId], references: [id])
  serverId  String
  channelId String
  messageId String
  type      String

  @@unique([channelId, serverId, type])
}
